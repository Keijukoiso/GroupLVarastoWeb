{"ast":null,"code":"var mysql = require('mysql');\n\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  // ÄLÄ käytä root:n tunnusta tuotannossa\n  password: '',\n  database: 'mydb'\n});\n\nconst getYritykset = (nimi, ytun, toim) => {\n  return new Promise((resolve, reject) => {\n    //let query = \"SELECT yritys.*, toimiala.selite as toimiala, COUNT(tilaus.id) as tilaukset, ROUND(SUM(tilaus.veroton), 2) as summa_veroton, ROUND(SUM(tilaus.veroton) + SUM(tilaus.veroton)*0.24, 2) as summa_verollinen FROM yritys LEFT JOIN toimiala ON yritys.toimiala_id = toimiala.id LEFT JOIN tilaus ON tilaus.y_id = yritys.id \"\n    let query = \"SELECT * FROM kayttaja\";\n    let x = \"WHERE \";\n    let params = [];\n    /*if (nimi != null || ytun != null || toim != null) {\r\n          if ( nimi != null  && nimi != \"\") {\r\n            query += x + \"yritys.nimi = ? \";\r\n            x = \"AND \"\r\n            params.push(nimi);\r\n        }\r\n        if ( ytun != null && ytun != \"\") {\r\n            query += x + \"yritys.ytunnus = ? \";\r\n            x = \"AND \"\r\n            params.push(ytun);\r\n        }\r\n        if ( toim != null && toim != \"\" && toim != \"-1\") {\r\n            query += x + \"toimiala.id = ? \";\r\n            params.push(toim);\r\n        }\r\n        \r\n      }\r\n    query += \"GROUP BY yritys.id \"*/\n\n    console.log(query);\n    connection.query(query, params, function (error, result, fields) {\n      if (error) {\n        console.log(\"Virhe\", error);\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nconst getToimialat = () => {\n  return new Promise((resolve, reject) => {\n    let query = \"SELECT id, selite from toimiala \";\n    connection.query(query, function (error, result, fields) {\n      if (error) {\n        console.log(\"Virhe\", error);\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nmodule.exports = {\n  getYritysByNimi: (nimi, ytun, toim) => {\n    return getYritykset(nimi, null, null);\n  },\n  getYritys: () => {\n    return getYritykset();\n  },\n  getToimialat: () => {\n    return getToimialat();\n  }\n};","map":{"version":3,"sources":["C:/Users/keijukoiso/Documents/Koulu/WEB/Mobiili/varasto/src/db/SQL.js"],"names":["mysql","require","connection","createConnection","host","user","password","database","getYritykset","nimi","ytun","toim","Promise","resolve","reject","query","x","params","console","log","error","result","fields","getToimialat","module","exports","getYritysByNimi","getYritys"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGF,KAAK,CAACG,gBAAN,CAAuB;AACpCC,EAAAA,IAAI,EAAE,WAD8B;AAEpCC,EAAAA,IAAI,EAAE,MAF8B;AAEjB;AACnBC,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,QAAQ,EAAE;AAJ0B,CAAvB,CAAjB;;AAQA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,KAAsB;AAEvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpC;AACA,QAAIC,KAAK,GAAG,wBAAZ;AACA,QAAIC,CAAC,GAAG,QAAR;AACA,QAAIC,MAAM,GAAG,EAAb;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIQC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAb,IAAAA,UAAU,CAACa,KAAX,CAAiBA,KAAjB,EAAwBE,MAAxB,EAAgC,UAAUG,KAAV,EAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAE7D,UAAIF,KAAJ,EAAW;AACPF,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,KAArB;AACAN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACH,OAHD,MAIK;AACDP,QAAAA,OAAO,CAACQ,MAAD,CAAP;AACH;AACJ,KATD;AAUH,GAvCM,CAAP;AAwCH,CA1CD;;AA8CA,MAAME,YAAY,GAAG,MAAM;AACvB,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,KAAK,GAAG,kCAAZ;AAEAb,IAAAA,UAAU,CAACa,KAAX,CAAiBA,KAAjB,EAAwB,UAAUK,KAAV,EAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAErD,UAAIF,KAAJ,EAAW;AACPF,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,KAArB;AACAN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACH,OAHD,MAIK;AACDP,QAAAA,OAAO,CAACQ,MAAD,CAAP;AACH;AACJ,KATD;AAUH,GAbM,CAAP;AAcH,CAfD;;AAkBAG,MAAM,CAACC,OAAP,GAAiB;AAEbC,EAAAA,eAAe,EAAE,CAACjB,IAAD,EAAOC,IAAP,EAAaC,IAAb,KAAsB;AACnC,WAAOH,YAAY,CAACC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAnB;AACH,GAJY;AAKbkB,EAAAA,SAAS,EAAE,MAAM;AACb,WAAOnB,YAAY,EAAnB;AACH,GAPY;AASbe,EAAAA,YAAY,EAAE,MAAM;AAChB,WAAOA,YAAY,EAAnB;AACH;AAXY,CAAjB","sourcesContent":["var mysql = require('mysql');\r\n\r\nvar connection = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',      // ÄLÄ käytä root:n tunnusta tuotannossa\r\n    password: '',\r\n    database: 'mydb'\r\n});\r\n\r\n\r\nconst getYritykset = (nimi, ytun, toim) => {\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        //let query = \"SELECT yritys.*, toimiala.selite as toimiala, COUNT(tilaus.id) as tilaukset, ROUND(SUM(tilaus.veroton), 2) as summa_veroton, ROUND(SUM(tilaus.veroton) + SUM(tilaus.veroton)*0.24, 2) as summa_verollinen FROM yritys LEFT JOIN toimiala ON yritys.toimiala_id = toimiala.id LEFT JOIN tilaus ON tilaus.y_id = yritys.id \"\r\n        let query = \"SELECT * FROM kayttaja\"\r\n        let x = \"WHERE \"\r\n        let params = [];\r\n\r\n        /*if (nimi != null || ytun != null || toim != null) {\r\n\r\n            if ( nimi != null  && nimi != \"\") {\r\n                query += x + \"yritys.nimi = ? \";\r\n                x = \"AND \"\r\n                params.push(nimi);\r\n            }\r\n            if ( ytun != null && ytun != \"\") {\r\n                query += x + \"yritys.ytunnus = ? \";\r\n                x = \"AND \"\r\n                params.push(ytun);\r\n            }\r\n            if ( toim != null && toim != \"\" && toim != \"-1\") {\r\n                query += x + \"toimiala.id = ? \";\r\n                params.push(toim);\r\n            }\r\n            \r\n\r\n        }\r\n        query += \"GROUP BY yritys.id \"*/\r\n\r\n        console.log(query);\r\n        connection.query(query, params, function (error, result, fields) {\r\n\r\n            if (error) {\r\n                console.log(\"Virhe\", error);\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n\r\n\r\nconst getToimialat = () => {\r\n    return new Promise((resolve, reject) => {\r\n        let query = \"SELECT id, selite from toimiala \";\r\n\r\n        connection.query(query, function (error, result, fields) {\r\n\r\n            if (error) {\r\n                console.log(\"Virhe\", error);\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n\r\nmodule.exports = {\r\n\r\n    getYritysByNimi: (nimi, ytun, toim) => {\r\n        return getYritykset(nimi, null, null);\r\n    },\r\n    getYritys: () => {\r\n        return getYritykset();\r\n    },\r\n\r\n    getToimialat: () => {\r\n        return getToimialat();\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}