{"ast":null,"code":"var mysql = require('mysql');\n\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  // ÄLÄ käytä root:n tunnusta tuotannossa\n  password: '',\n  database: 'varasto'\n});\n\nconst getYritykset = (nimi, ytun, toim) => {\n  return new Promise((resolve, reject) => {\n    //let query = \"SELECT yritys.*, toimiala.selite as toimiala, COUNT(tilaus.id) as tilaukset, ROUND(SUM(tilaus.veroton), 2) as summa_veroton, ROUND(SUM(tilaus.veroton) + SUM(tilaus.veroton)*0.24, 2) as summa_verollinen FROM yritys LEFT JOIN toimiala ON yritys.toimiala_id = toimiala.id LEFT JOIN tilaus ON tilaus.y_id = yritys.id \"\n    let x = \"WHERE \";\n    let params = [];\n\n    if (nimi != null || ytun != null || toim != null) {\n      if (nimi != null && nimi != \"\") {\n        query += x + \"yritys.nimi = ? \";\n        x = \"AND \";\n        params.push(nimi);\n      }\n\n      if (ytun != null && ytun != \"\") {\n        query += x + \"yritys.ytunnus = ? \";\n        x = \"AND \";\n        params.push(ytun);\n      }\n\n      if (toim != null && toim != \"\" && toim != \"-1\") {\n        query += x + \"toimiala.id = ? \";\n        params.push(toim);\n      }\n    }\n\n    query += \"GROUP BY yritys.id \";\n    console.log(query);\n    connection.query(query, params, function (error, result, fields) {\n      if (error) {\n        console.log(\"Virhe\", error);\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nconst getToimialat = () => {\n  return new Promise((resolve, reject) => {\n    let query = \"SELECT id, selite from toimiala \";\n    connection.query(query, function (error, result, fields) {\n      if (error) {\n        console.log(\"Virhe\", error);\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nmodule.exports = {\n  getYritysByNimi: (nimi, ytun, toim) => {\n    return getYritykset(nimi, null, null);\n  },\n  getYritys: (nimi, ytun, toim) => {\n    return getYritykset(nimi, ytun, toim);\n  },\n  getToimialat: () => {\n    return getToimialat();\n  }\n};","map":{"version":3,"sources":["C:/Users/keijukoiso/Documents/Koulu/WEB/Mobiili/varasto/src/db/SQL.js"],"names":["mysql","require","connection","createConnection","host","user","password","database","getYritykset","nimi","ytun","toim","Promise","resolve","reject","x","params","query","push","console","log","error","result","fields","getToimialat","module","exports","getYritysByNimi","getYritys"],"mappings":"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","sourcesContent":["var mysql = require('mysql');\r\n\r\nvar connection = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',      // ÄLÄ käytä root:n tunnusta tuotannossa\r\n    password: '',\r\n    database: 'varasto'\r\n});\r\n\r\n\r\nconst getYritykset = (nimi, ytun, toim) => {\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        //let query = \"SELECT yritys.*, toimiala.selite as toimiala, COUNT(tilaus.id) as tilaukset, ROUND(SUM(tilaus.veroton), 2) as summa_veroton, ROUND(SUM(tilaus.veroton) + SUM(tilaus.veroton)*0.24, 2) as summa_verollinen FROM yritys LEFT JOIN toimiala ON yritys.toimiala_id = toimiala.id LEFT JOIN tilaus ON tilaus.y_id = yritys.id \"\r\n        let x = \"WHERE \"\r\n        let params = [];\r\n\r\n        if (nimi != null || ytun != null || toim != null) {\r\n\r\n            if ( nimi != null  && nimi != \"\") {\r\n                query += x + \"yritys.nimi = ? \";\r\n                x = \"AND \"\r\n                params.push(nimi);\r\n            }\r\n            if ( ytun != null && ytun != \"\") {\r\n                query += x + \"yritys.ytunnus = ? \";\r\n                x = \"AND \"\r\n                params.push(ytun);\r\n            }\r\n            if ( toim != null && toim != \"\" && toim != \"-1\") {\r\n                query += x + \"toimiala.id = ? \";\r\n                params.push(toim);\r\n            }\r\n            \r\n\r\n        }\r\n        query += \"GROUP BY yritys.id \"\r\n\r\n        console.log(query);\r\n        connection.query(query, params, function (error, result, fields) {\r\n\r\n            if (error) {\r\n                console.log(\"Virhe\", error);\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n\r\n\r\nconst getToimialat = () => {\r\n    return new Promise((resolve, reject) => {\r\n        let query = \"SELECT id, selite from toimiala \";\r\n\r\n        connection.query(query, function (error, result, fields) {\r\n\r\n            if (error) {\r\n                console.log(\"Virhe\", error);\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n\r\nmodule.exports = {\r\n\r\n    getYritysByNimi: (nimi, ytun, toim) => {\r\n        return getYritykset(nimi, null, null);\r\n    },\r\n    getYritys: (nimi, ytun, toim) => {\r\n        return getYritykset(nimi, ytun, toim);\r\n    },\r\n\r\n    getToimialat: () => {\r\n        return getToimialat();\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}